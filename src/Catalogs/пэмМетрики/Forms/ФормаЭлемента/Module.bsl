&НаКлиенте
Процедура МетодПолученияМетрикиПриИзменении(Элемент)
	
	ОбновитьСостояниеФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МаскаИмениМетрики = "[a-zA-Z_:][a-zA-Z0-9_:]*";
	
	Результат = пэмМетрикиСервер.ПроверитьСтрокуНаСоответствиеМаске(Объект.Код,МаскаИмениМетрики);
	Если Результат.ЕстьОшибка Тогда
		Отказ = Истина;
		Сообщить("Имя метрики не соответствует маске: " + МаскаИмениМетрики);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерсональноеРасписаниеПриИзменении(Элемент)
	
	ОбновитьСостояниеФормы();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроверкуАлгоритмаРасчетаНаСервере()
	
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить("Перед выполнением проверки объект необходимо записать!");
		Возврат;
	КонецЕсли; 
	
	сткВозврат = пэмМетрикиСервер.СформироватьМетрику(Объект.Алгоритм);
	Если сткВозврат.Ошибка Тогда
		
		Сообщить("Процесс проверки расчета завершен с ошибкой на этапе расчета.
		|Описание ошибки:" +
		Символы.ПС + сткВозврат.ОписаниеОшибки);
		
		Возврат;
		
	КонецЕсли;
	           		
	сткВозврат = пэмМетрикиСервер.ПривестиТаблицуРасчетаМетрикиКСтрокеPrometheus(Объект.Код, Объект.ТипМетрики, сткВозврат.МетрикаТаблицей);
	
	Если сткВозврат.Ошибка Тогда
		
		Сообщить("Процесс проверки расчета завершен с ошибкой на этапе преобразования.
		||Итоговая метрика:" +
		Символы.ПС + сткВозврат.МетрикаСтрокой + " 
		|Описание ошибки:" +
		Символы.ПС + сткВозврат.ОписаниеОшибки);
		
		Возврат;

	КонецЕсли; 
	
	Сообщить("Проверка алгоритма расчета завершена.
			 |Итоговая метрика:" +
			 Символы.ПС + сткВозврат.МетрикаСтрокой);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуАлгоритма(Команда)
	
	ВыполнитьПроверкуАлгоритмаРасчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.Алгоритм = 	"
		|//В результате работы алгоритма должна получиться таблица значений с именем ""ТаблицаЗначений""
		|//Обязательным является наличие колонки ""value""
		|//В случае необходимости можно добавить дополнительные колонки, выполняющие фунции разделителей метрик
		|//Имена колонок должны состоять только из латинских символов
		|//Тип содержимого колонки ""value"" - ""Число""
		|//Тип содержимого остальных колонок - ""Строка""
		|
		|//Пример:		|
		|ТаблицаЗначений = Новый ТаблицаЗначений;
		|ТаблицаЗначений.Колонки.Добавить(""label"", Новый ОписаниеТипов(""Строка""));
		|ТаблицаЗначений.Колонки.Добавить(""value"", Новый ОписаниеТипов(""Число""));
		|
		|ГСЧ = Новый ГенераторСлучайныхЧисел();
		|
		|НоваяСтрока = ТаблицаЗначений.добавить();
		|НоваяСтрока.label = ""Показатель_1"";
		|НоваяСтрока.value = 	ГСЧ.СлучайноеЧисло(0,100);
		|
		|НоваяСтрока = ТаблицаЗначений.добавить();
		|НоваяСтрока.label = ""Показатель_2"";
		|НоваяСтрока.value = ГСЧ.СлучайноеЧисло(0,50);";
		
	КонецЕсли;
	
	ОбновитьСостояниеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеФормы()
	
	Если Объект.МетодПолученияМетрики = ПредопределенноеЗначение("Перечисление.пэмМетодыПолученияМетрик.Pull") Тогда
		
		Если Не Объект.Активность Тогда
			Элементы.СостояниеМетодаДоставки.Картинка = БиблиотекаКартинок.пэмPullRed;
		Иначе
			Элементы.СостояниеМетодаДоставки.Картинка = БиблиотекаКартинок.пэмPullGreen;
		КонецЕсли;
							
		ПерсональноеРасписание = Ложь;
		
		Элементы.ОписаниеМетодаДоставкиМетрики.Заголовок = НСтр("ru = 'Расписание доставки определяется настройками Prometheus'");
		
		Элементы.ПерсональноеРасписание.Доступность = Ложь;
		
	Иначе
		
		Если Не Объект.Активность ИЛИ Не Использование Тогда
			Элементы.СостояниеМетодаДоставки.Картинка = БиблиотекаКартинок.пэмPushRed;
		Иначе
			Элементы.СостояниеМетодаДоставки.Картинка = БиблиотекаКартинок.пэмPushGreen;			
		КонецЕсли;
		
		Если ПерсональноеРасписание Тогда
			Префикс = НСтр("ru = 'Индивидуальное расписание: '");
		Иначе
			Префикс = НСтр("ru = 'Общее расписание: '");
		КонецЕсли;
		
		ПредставлениеРасписания = пэмМетрикиКлиент.ПолучитьПредставлениеРасписания(Расписание, ПерсональноеРасписание);
		Элементы.ОписаниеМетодаДоставкиМетрики.Заголовок = Префикс + ПредставлениеРасписания;
		
		Элементы.ПерсональноеРасписание.Доступность = Истина;	
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеМетодаДоставкиМетрикиНажатие(Элемент)
	
	Если ПерсональноеРасписание Тогда
		Расписание = пэмМетрикиКлиент.ОпределитьРасписаниеРегламентногоЗаданияИнтерактивно(Расписание);
	Иначе
		ОткрытьФорму("ОбщаяФорма.пэмНастройкиМетрик");
	КонецЕсли;
	
	ОбновитьСостояниеФормы();
	
КонецПроцедуры


&НаКлиенте
Процедура АктивностьПриИзменении(Элемент)
	
	ОбновитьСостояниеФормы();
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	ПараметрыРегламентногоЗадания = пэмМетрикиСервер.ПолучитьПараметрыРегламентногоЗадания(Объект.ИдентификаторРегламента);
	
	Если ПараметрыРегламентногоЗадания = Неопределено Тогда
		ПараметрыРегламентногоЗадания = пэмМетрикиСервер.ПолучитьПараметрыРегламентногоЗадания();
	КонецЕсли;
	
	ПерсональноеРасписание = Не ПараметрыРегламентногоЗадания.Предопределенное;
	Расписание = ПараметрыРегламентногоЗадания.Расписание;
					
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыРегламентногоЗадания = пэмМетрикиСервер.ПолучитьОписаниеПараметровРегламентногоЗадания();
	ЗаполнитьЗначенияСвойств(ПараметрыРегламентногоЗадания, ЭтаФорма);
	ПараметрыРегламентногоЗадания.Идентификатор = Объект.ИдентификаторРегламента;
	пэмМетрикиСервер.ПереопределитьРегламентноеЗадание(ПараметрыРегламентногоЗадания);
	Объект.ИдентификаторРегламента = ПараметрыРегламентногоЗадания.Идентификатор;
	
КонецПроцедуры



